#Exercise 4. Rewrite the Sieve challenge in Byte Dev using functional programming tools.
from functools import reduce
from operator import sub

def sieve_fn(number):
    #sieve = set(range(2, number + 1))
    sieve = set(range(number,number + 1))
    while sieve:
        prime = min(sieve)
        #print(prime, end="\t")
        sieve -= set(range(prime, number + 1, prime))
    #print()
        print(prime, end="\t")

print(list(filter(sieve_fn,range(2,20))))

print(list(map(sieve_fn,range(2,20))))

print(reduce(sub,(set(range(x ** 2, 100, x)) for x in range(2, int(100 ** 0.5) + 1)), set(range(2, 100))))

print(list(reduce(sieve_fn,range(2,20))))
